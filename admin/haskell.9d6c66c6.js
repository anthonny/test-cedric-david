("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire14b8.register("lW6sL",(function(e,t){var r,n,a,i;function o(e,t,r){return t(r),r(e,t)}r=e.exports,n="haskell",a=function(){return y},Object.defineProperty(r,n,{get:a,set:i,enumerable:!0,configurable:!0});var l=/[a-z_]/,u=/[A-Z]/,s=/\d/,f=/[0-9A-Fa-f]/,c=/[0-7]/,d=/[a-z_A-Z0-9'\xa1-\uffff]/,m=/[-!#$%&*+.\/<=>?@\\^|~:]/,p=/[(),;[\]`{}]/,h=/[ \t\v\f]/;function g(e,t){if(e.eatWhile(h))return null;var r=e.next();if(p.test(r)){if("{"==r&&e.eat("-")){var n="comment";return e.eat("#")&&(n="meta"),o(e,t,b(n,1))}return null}if("'"==r)return e.eat("\\"),e.next(),e.eat("'")?"string":"error";if('"'==r)return o(e,t,w);if(u.test(r))return e.eatWhile(d),e.eat(".")?"qualifier":"type";if(l.test(r))return e.eatWhile(d),"variable";if(s.test(r)){if("0"==r){if(e.eat(/[xX]/))return e.eatWhile(f),"integer";if(e.eat(/[oO]/))return e.eatWhile(c),"number"}return e.eatWhile(s),n="number",e.match(/^\.\d+/)&&(n="number"),e.eat(/[eE]/)&&(n="number",e.eat(/[-+]/),e.eatWhile(s)),n}return"."==r&&e.eat(".")?"keyword":m.test(r)?"-"==r&&e.eat(/-/)&&(e.eatWhile(/-/),!e.eat(m))?(e.skipToEnd(),"comment"):(e.eatWhile(m),"variable"):"error"}function b(e,t){return 0==t?g:function(r,n){for(var a=t;!r.eol();){var i=r.next();if("{"==i&&r.eat("-"))++a;else if("-"==i&&r.eat("}")&&0==--a)return n(g),e}return n(b(e,a)),e}}function w(e,t){for(;!e.eol();){var r=e.next();if('"'==r)return t(g),"string";if("\\"==r){if(e.eol()||e.eat(h))return t(v),"string";e.eat("&")||e.next()}}return t(g),"error"}function v(e,t){return e.eat("\\")?o(e,t,w):(e.next(),t(g),"error")}var F=function(){var e={};function t(t){return function(){for(var r=0;r<arguments.length;r++)e[arguments[r]]=t}}return t("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),t("keyword")("..",":","::","=","\\","<-","->","@","~","=>"),t("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<*","<=","<$>","<*>","=<<","==",">",">=",">>",">>=","^","^^","||","*","*>","**"),t("builtin")("Applicative","Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),t("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","pure","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3"),e}();const y={name:"haskell",startState:function(){return{f:g}},copyState:function(e){return{f:e.f}},token:function(e,t){var r=t.f(e,(function(e){t.f=e})),n=e.current();return F.hasOwnProperty(n)?F[n]:r},languageData:{commentTokens:{line:"--",block:{open:"{-",close:"-}"}}}}}));